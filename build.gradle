import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2021.3.1"
    id "org.ysb33r.doxygen" version "0.7.0"
}

// For testing development versions of WPILib
// wpi.wpilibVersion = '2021.3.1'
// wpi.wpimathVersion = '2021.3.1'

// For automatically using the newest development version of WPILib
// wpi.wpilibVersion = '2021.+'
// wpi.wpimathVersion = '2021.+'

// For using remote development artifacts
// wpi.maven.useDevelopment = true

// For using local development artifacts
// wpi.maven.useFrcMavenLocalDevelopment = true

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamNumber()
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)

            postdeploy << { ctx ->
                ctx.execute('chown admin /home/lvuser/frcUserProgram')
                ctx.execute('chmod u+s /home/lvuser/frcUserProgram')
            }
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Enable simulation gui support. Must check the box in vscode to enable support
// upon debugging
dependencies {
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)
    simulation wpi.deps.sim.driverstation(wpi.platforms.desktop, false)

    // Websocket extensions require additional configuration.
    // simulation wpi.deps.sim.ws_server(wpi.platforms.desktop, false)
    // simulation wpi.deps.sim.ws_client(wpi.platforms.desktop, false)
}

nativeUtils.platformConfigs.named("linuxathena").configure {
    it.cppCompiler.args.add('-Wall')
    it.cppCompiler.args.add('-Wextra')
    it.cppCompiler.args.add('-pedantic')
    it.cppCompiler.args.add('-Werror')
    it.cppCompiler.args.add('-Wno-unused-parameter')
    // Suppress warning from incorrect [[deprecated]] attribute usage in
    // CANSparkMax.h
    it.cppCompiler.args.add('-Wno-attributes')
}

if (OperatingSystem.current().isWindows()) {
    nativeUtils.platformConfigs.named(wpi.platforms.desktop).configure {
        it.cppCompiler.args.add('/W3')
        it.cppCompiler.args.add('/WX')
    }
} else {
    nativeUtils.platformConfigs.named(wpi.platforms.desktop).configure {
        it.cppCompiler.args.add('-Wall')
        it.cppCompiler.args.add('-Wextra')
        it.cppCompiler.args.add('-pedantic')
        it.cppCompiler.args.add('-Werror')
        it.cppCompiler.args.add('-Wno-unused-parameter')
    }
}

nativeUtils.platformConfigs.named("linuxx86-64").configure {
    // GCC 11 gives false positives
    it.cppCompiler.args.add('-Wno-error=maybe-uninitialized')

    it.linker.args.add('-lstdc++fs')
}

if (project.hasProperty("asan")) {
    nativeUtils.platformConfigs.named("linuxx86-64").configure {
        it.cppCompiler.args.add('-g3')
        it.cppCompiler.args.add('-fsanitize=address')
        it.linker.args.add('-fsanitize=address')
    }
}

if (project.hasProperty("ubsan")) {
    nativeUtils.platformConfigs.named("linuxx86-64").configure {
        it.cppCompiler.args.add('-g3')
        it.cppCompiler.args.add('-fsanitize=undefined')
        it.linker.args.add('-fsanitize=undefined')
    }
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }

                exportedHeaders {
                    srcDir 'src/test/include'
                }
            }

            wpi.deps.vendor.cpp(it)
            wpi.deps.wpilib(it)
            wpi.deps.googleTest(it)
        }
    }
}

task buildAthena {
    dependsOn 'frcUserProgramLinuxathenaReleaseExecutable'
}

task test {
    dependsOn 'testRelease'
}

task testDebug {
    dependsOn 'runFrcUserProgramTest' + wpi.platforms.desktop.capitalize() + 'DebugGoogleTestExe'
}

task testRelease {
    dependsOn 'runFrcUserProgramTest' + wpi.platforms.desktop.capitalize() + 'ReleaseGoogleTestExe'
}

task simulateCpp {
    dependsOn 'simulateFrcUserProgram' + wpi.platforms.desktop.capitalize() + 'ReleaseExecutable'
}

if (!OperatingSystem.current().isWindows()) {
    simulateCpp.doLast {
        exec {
            executable 'tail'
            args '-f', 'build/stdout/simulateFrcUserProgram' + wpi.platforms.desktop.capitalize() + 'ReleaseExecutable.log'
        }
    }

    task valgrind(type: Exec) {
        dependsOn 'installFrcUserProgramTest' + wpi.platforms.desktop.capitalize() + 'ReleaseGoogleTestExe'
        commandLine 'python3', './buildscripts/valgrind.py'
    }
}

task intellisense(type: Exec) {
    dependsOn 'generateCompileCommands'
    commandLine 'python3', './buildscripts/copy_compile_commands.py'
}

doxygen {
    executables {
        doxygen version : '1.9.1',
        baseURI : 'https://frcmaven.wpi.edu/artifactory/generic-release-mirror/doxygen'
    }

    exclude 'adi/*'
    exclude 'fmt/*'
    exclude 'frc/*'
    exclude 'rev/*'

    extension_mapping 'inc=C++'
    generate_html true
    generate_latex false
    generate_treeview true
    html_extra_stylesheet 'docs/theme.css'
    html_timestamp true
    quiet true
    project_name 'Robot-2020'
    use_mathjax true
    warn_as_error 'FAIL_ON_WARNINGS'
    warn_if_undocumented true

    source 'src/main/include'
    outputDir 'build/docs/'
}
