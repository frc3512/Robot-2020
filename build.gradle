import org.gradle.internal.os.OperatingSystem

plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2022.1.1"
    id "org.ysb33r.doxygen" version "0.7.0"
}

// For using remote development artifacts
// wpi.maven.useLocal = false
// wpi.maven.useDevelopment = true
// wpi.versions.wpilibVersion = '2022.+'
// wpi.versions.wpimathVersion = '2022.+'

// For using local development artifacts
// wpi.maven.useFrcMavenLocalDevelopment = true
// wpi.versions.wpilibVersion = '2022.424242.+'
// wpi.versions.wpimathVersion = '2022.424242.+'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcCpp(getArtifactTypeClass('FRCNativeArtifact')) {
                    postdeploy << { ctx ->
                        ctx.execute('chown admin /home/lvuser/frcUserProgram')
                        ctx.execute('chmod u+s /home/lvuser/frcUserProgram')
                    }
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                }
            }
        }
    }
}

def deployArtifact = deploy.targets.roborio.artifacts.frcCpp

// Set this to true to enable desktop support.
def includeDesktopSupport = true

// Set to true to run simulation in debug mode
wpi.cpp.debugSimulation = false

// Default enable simgui
wpi.sim.addGui().defaultEnabled = true

// Enable DS but not by default
wpi.sim.addDriverstation()

nativeUtils.platformConfigs.named("linuxathena").configure {
    it.cppCompiler.args.add('-Wall')
    it.cppCompiler.args.add('-Wextra')
    it.cppCompiler.args.add('-pedantic')
    it.cppCompiler.args.add('-Werror')
    it.cppCompiler.args.add('-Wno-unused-parameter')
}

if (OperatingSystem.current().isWindows()) {
    nativeUtils.platformConfigs.named(wpi.platforms.desktop).configure {
        it.cppCompiler.args.add('/W3')
        it.cppCompiler.args.add('/WX')
    }
} else {
    nativeUtils.platformConfigs.named(wpi.platforms.desktop).configure {
        it.cppCompiler.args.add('-Wall')
        it.cppCompiler.args.add('-Wextra')
        it.cppCompiler.args.add('-pedantic')
        it.cppCompiler.args.add('-Werror')
        it.cppCompiler.args.add('-Wno-unused-parameter')
    }
}

nativeUtils.platformConfigs.named("linuxx86-64").configure {
    // GCC 11 gives false positives
    it.cppCompiler.args.add('-Wno-error=maybe-uninitialized')

    it.linker.args.add('-lstdc++fs')
}

if (project.hasProperty("asan")) {
    nativeUtils.platformConfigs.named("linuxx86-64").configure {
        it.cppCompiler.args.add('-g3')
        it.cppCompiler.args.add('-fsanitize=address')
        it.linker.args.add('-fsanitize=address')
    }
}

if (project.hasProperty("tsan")) {
    nativeUtils.platformConfigs.named("linuxx86-64").configure {
        it.cppCompiler.args.add('-g3')
        it.cppCompiler.args.add('-fsanitize=thread')
        it.linker.args.add('-fsanitize=thread')
    }
}

if (project.hasProperty("ubsan")) {
    nativeUtils.platformConfigs.named("linuxx86-64").configure {
        it.cppCompiler.args.add('-g3')
        it.cppCompiler.args.add('-fsanitize=undefined')
        it.linker.args.add('-fsanitize=undefined')
    }
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDir 'src/main/cpp'
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDir 'src/main/include'
                }
            }

            // Set deploy task to deploy this component
            deployArtifact.component = it

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            // Enable simulation for this component
            wpi.sim.enable(it)
            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDir 'src/test/cpp'
                    include '**/*.cpp'
                }
                exportedHeaders {
                    srcDir 'src/test/include'
                }
            }

            // Enable run tasks for this component
            wpi.cpp.enableExternalTasks(it)

            wpi.cpp.vendor.cpp(it)
            wpi.cpp.deps.wpilib(it)
            wpi.cpp.deps.googleTest(it)
        }
    }
}

task buildAthena {
    dependsOn 'frcUserProgramLinuxathenaReleaseExecutable'
}

task testDebug {
    dependsOn 'runFrcUserProgramTest' + wpi.platforms.desktop.capitalize() + 'DebugGoogleTestExe'
}

task testRelease {
    dependsOn 'runFrcUserProgramTest' + wpi.platforms.desktop.capitalize() + 'ReleaseGoogleTestExe'
}

task intellisense(type: Exec) {
    dependsOn 'generateCompileCommands'
    commandLine 'python3', './buildscripts/copy_compile_commands.py'
}

doxygen {
    executables {
        doxygen version : '1.9.2',
        baseURI : 'https://frcmaven.wpi.edu/artifactory/generic-release-mirror/doxygen'
    }

    exclude 'frc/*'
    exclude 'photonlib/*'

    extension_mapping 'inc=C++'
    generate_html true
    generate_latex false
    generate_treeview true
    html_extra_stylesheet 'docs/theme.css'
    html_timestamp true
    quiet true
    project_name 'Robot-2020'
    use_mathjax true
    warn_as_error 'FAIL_ON_WARNINGS'
    warn_if_undocumented true

    source 'src/main/include'
    outputDir 'build/docs/'
}
