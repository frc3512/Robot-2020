plugins {
    id "cpp"
    id "google-test-test-suite"
    id "edu.wpi.first.GradleRIO" version "2020.3.2"
}

// Used for testing local publishes of WPILib
// wpi.maven.useFrcMavenLocalDevelopment = true
// wpi.wpilibVersion = '2020.424242.+'

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(3512)
        }
    }
    artifacts {
        frcNativeArtifact('frcCpp') {
            targets << "roborio"
            component = 'frcUserProgram'
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Enable simulation gui support. Must check the box in vscode to enable support
// upon debugging
dependencies {
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, true)
}

nativeUtils.platformConfigs.named("linuxathena").configure {
    it.cppCompiler.args.remove('-g')
}

nativeUtils.platformConfigs.named("linuxx86-64").configure {
    it.cppCompiler.args.remove('-g')
    it.linker.args.add('-lstdc++fs')
}

model {
    components {
        frcUserProgram(NativeExecutableSpec) {
            targetPlatform wpi.platforms.roborio
            if (includeDesktopSupport) {
                targetPlatform wpi.platforms.desktop
            }

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDirs = ['src/main/cpp',
                               'thirdparty/wpimath/src/main/native/cpp',
                               'thirdparty/wpiutil/src/main/native/cpp']
                    include '**/*.cpp', '**/*.cc'
                }
                exportedHeaders {
                    srcDirs = ['src/main/include',
                               'thirdparty/wpimath/src/main/native/include',
                               'thirdparty/wpiutil/src/main/native/include']
                }
            }

            // Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
            wpi.deps.wpilib(it)
            wpi.deps.vendor.cpp(it)
        }
    }
    testSuites {
        frcUserProgramTest(GoogleTestTestSuiteSpec) {
            testing $.components.frcUserProgram

            binaries {
              all {
                if (it.buildType.name.contains('debug')) {
                  it.buildable = false
                }
              }
            }

            sources.cpp {
                source {
                    srcDirs = ['src/test/cpp',
                               'thirdparty/wpimath/src/test/native/cpp',
                               'thirdparty/wpiutil/src/test/native/cpp']
                    include '**/*.cpp'
                    include '**/*.cc'
                }

                exportedHeaders {
                    srcDirs = ['src/test/include',
                               'thirdparty/wpimath/src/test/native/include',
                               'thirdparty/wpiutil/src/test/native/include']
                }
            }

            wpi.deps.wpilib(it)
            wpi.deps.googleTest(it)
            wpi.deps.vendor.cpp(it)
        }
    }
}
